\documentclass{article}

\setlength{\oddsidemargin}{0 in} % odd page left margin
\setlength{\evensidemargin}{0 in} % even page left margin
\setlength{\textwidth}{6 in}    % width of text

\title{HVTN065 Summary}

\begin{document}

\maketitle
 
<<setup, include=FALSE, cache=FALSE, echo=FALSE, warning=FALSE>>=
opts_chunk$set(fig.align = 'center', dev = 'png', #fig.show = 'hold',
               message = FALSE, warning = FALSE, cache = FALSE,
               echo = FALSE, fig.path = 'figure/HVTN065-',
               cache.path = 'cache/HVTN065-')
  
setwd("..")
library(ProjectTemplate)
load.project()
@ 

\section{Population Statistics}

<<population_stats_summary>>=
# We prettify the population stats, so that they have a reduced number of nodes
# in the output.
HVTN065_population_stats <- lapply(HVTN065_population_stats, pretty_popstats,
                                   nodes = 2)
m_pop_stats <- melt(HVTN065_population_stats)
colnames(m_pop_stats) <- c("Marker", "Sample", "Proportion", "Stimulation")
m_pop_stats <- subset(m_pop_stats, select = -c(Stimulation))
m_pop_stats$Marker <- as.character(m_pop_stats$Marker)
m_pop_stats <- subset(m_pop_stats, Marker != "root")

colnames(HVTN065_pData_gs_manual) <- c("Sample", "PTID", "Stimulation", "VISITNO")
m_pop_stats <- plyr:::join(m_pop_stats, HVTN065_pData_gs_manual, by = "Sample")
m_pop_stats$VISITNO <- factor(m_pop_stats$VISITNO)
m_pop_stats$PTID <- factor(m_pop_stats$PTID)

# Summarizes the proportions for each marker.
summary_by_marker <- ddply(m_pop_stats, .(Marker, Stimulation, VISITNO), summarize,
                           Mean = mean(Proportion), Median = median(Proportion),
                           CV = sd(Proportion) / mean(Proportion))

# For each patient, we average the proportions across stimulation groups for each visit number.
# This produces a cleaner summary of the difference in proportions between visits 2 and 12 across patients.
prop_summary <- ddply(m_pop_stats, .(Marker, PTID, VISITNO), summarize, avg_prop = mean(Proportion))

prop_summary$marker_group <- "Other"
prop_summary$marker_group <- with(prop_summary,
                                  replace(marker_group, grep("^CD4", Marker), "CD4"))
prop_summary$marker_group <- with(prop_summary,
                                  replace(marker_group, grep("^CD8", Marker), "CD8"))
prop_summary$Marker <- sapply(strsplit(prop_summary$Marker, split = ":"), tail, n = 1)
prop_summary$Marker <- sapply(strsplit(prop_summary$Marker, split = "/"), tail, n = 1)

# Adds treatment group information to the proportion summary
treatment_info <- data.frame(PTID = gsub("-", "", as.character(treatment.HVTN065$Ptid)),
                             Treatment = "Treatment", stringsAsFactors = FALSE)
treatment_info$Treatment <- replace(treatment_info$Treatment, grep("^Placebo", treatment.HVTN065$rx), "Placebo")

prop_summary <- plyr::join(prop_summary, treatment_info)
@ 

\section{Subject Proportions by Visit Number}

<<proportions_by_visit>>=
p <- ggplot(subset(prop_summary, marker_group == "Other"), aes(x = PTID, fill = VISITNO))
p <- p + geom_bar(aes(weight = avg_prop), position = "dodge")
p <- p + facet_wrap(~ Marker, scale = "free") + theme_bw() + scale_x_discrete(breaks = NULL)
p + theme(axis.text.x = element_text(angle = 90)) + ylab("Average Proportion Across Stimulation Groups")

p <- ggplot(subset(prop_summary, marker_group == "CD4"), aes(x = PTID, fill = VISITNO))
p <- p + geom_bar(aes(weight = avg_prop), position = "dodge")
p <- p + facet_wrap(~ Marker, scale = "free") + theme_bw() + scale_x_discrete(breaks = NULL)
p + theme(axis.text.x = element_text(angle = 90)) + ylab("Average Proportion Across Stimulation Groups")

p <- ggplot(subset(prop_summary, marker_group == "CD8"), aes(x = PTID, fill = VISITNO))
p <- p + geom_bar(aes(weight = avg_prop), position = "dodge")
p <- p + facet_wrap(~ Marker, scale = "free") + theme_bw() + scale_x_discrete(breaks = NULL)
p + theme(axis.text.x = element_text(angle = 90)) + ylab("Average Proportion Across Stimulation Groups")
@ 

<<proportions_by_treatment>>=
p <- ggplot(subset(prop_summary, marker_group == "Other"), aes(x = VISITNO, y = avg_prop))
p <- p + geom_boxplot() + scale_x_discrete(labels = c("Pre-vaccination", "Post-vaccination"))
p <- p + facet_grid(Treatment ~ Marker, scale = "free")
p + xlab("Vaccination Status") + ylab("Proportion of Parent Population")

p <- ggplot(subset(prop_summary, marker_group == "CD4"), aes(x = VISITNO, y = avg_prop))
p <- p + geom_boxplot() + scale_x_discrete(labels = c("Pre", "Post"))
p <- p + facet_grid(Treatment ~ Marker, scale = "free") + ylim(0, 0.0025)
p + xlab("Vaccination Status") + ylab("Proportion of Parent Population") + ggtitle('CD4 Cytokines')

p <- ggplot(subset(prop_summary, marker_group == "CD8"), aes(x = VISITNO, y = avg_prop))
p <- p + geom_boxplot() + scale_x_discrete(labels = c("Pre", "Post"))
p <- p + facet_grid(Treatment ~ Marker, scale = "free") + ylim(0, 0.0025)
p + xlab("Vaccination Status") + ylab("Proportion of Parent Population") + ggtitle('CD8 Cytokines')


prop_summary_subset <- subset(prop_summary, marker_group != "Other")
d_ply(prop_summary_subset, .(marker_group, Marker), function(summary_marker) {
  p <- ggplot(summary_marker, aes(x = VISITNO, y = avg_prop))
  p <- p + theme_bw()
  p <- p + geom_boxplot() + scale_x_discrete(labels = c("Pre-vaccine", "Post-vaccine"))
  p <- p + facet_grid(Treatment ~ Marker) + ggtitle(paste(summary_marker$marker_group, 'Cytokines'))
  p <- p + xlab("Vaccination Status") + ylab("Proportion of Parent Population")
  p <- p + theme(axis.text = element_text(size = 24))
  p <- p + theme(axis.title.x = element_text(size = 24))
  p <- p + theme(axis.title.y = element_text(size = 24))
  p <- p + theme(strip.text.x = element_text(size = 24))
  p <- p + theme(strip.text.y = element_text(size = 24))
  p <- p + theme(title = element_text(size = 24))
  p
  png(with(summary_marker, paste0("plots/", marker_group, "-", Marker, ".png"))[1], width = 960, height = 960)
  print(p)
  dev.off()
  NULL
})

p <- ggplot(subset(prop_summary, marker_group == "CD4"), aes(x = VISITNO, y = avg_prop))
p <- p + geom_boxplot() + scale_x_discrete(labels = c("Pre", "Post"))
p <- p + facet_grid(Treatment ~ Marker, scale = "free") + ylim(0, 0.0025)
p + xlab("Vaccination Status") + ylab("Proportion of Parent Population") + ggtitle('CD4 Cytokines')

p <- ggplot(subset(prop_summary, marker_group == "CD8"), aes(x = VISITNO, y = avg_prop))
p <- p + geom_boxplot() + scale_x_discrete(labels = c("Pre", "Post"))
p <- p + facet_grid(Treatment ~ Marker, scale = "free") + ylim(0, 0.0025)
p + xlab("Vaccination Status") + ylab("Proportion of Parent Population") + ggtitle('CD8 Cytokines')

@ 

\section{Cytokine Priors}

<<cytokine_priors>>=
stimulation_groups <- names(cytokine_priors)
root_populations <- names(cytokine_priors[[1]])

root_stim_grid <- expand.grid(stimulation = stimulation_groups, root = root_populations)

x <- seq(0, 5, length = 1000)
prior_densities <- lapply(seq_len(nrow(root_stim_grid)), function(i) {
  stim_group <- root_stim_grid$stimulation[i]
  root_pop <- root_stim_grid$root[i]
  marker_density <- lapply(cytokine_priors[[stim_group]][[root_pop]], function(marker_prior) {
    with(marker_prior, dmvtmix(x, w = w0, mu = Mu0, sigma = Omega0, nu = 1))
  })
  melt_density <- melt(marker_density)
  colnames(melt_density) <- c("Density", "Marker")
  cbind.data.frame(x = x, Stimulation = stim_group, Population = root_pop, melt_density)
})
prior_densities <- do.call(rbind, prior_densities)

p <- ggplot(subset(prior_densities, Marker == "TNFa"), aes(x, Density)) + geom_line() + facet_grid(Population ~ Stimulation)
p <- p + ggtitle("TNFa Prior Densities")
p

x11()

p <- ggplot(subset(prior_densities, Marker == "IFNg"), aes(x, Density)) + geom_line() + facet_grid(Population ~ Stimulation)
p <- p + ggtitle("IFNg Prior Densities")
p

x11()

p <- ggplot(subset(prior_densities, Marker == "IL2"), aes(x, Density)) + geom_line() + facet_grid(Population ~ Stimulation)
p <- p + ggtitle("IL2 Prior Densities")
p



@ 

%\section{Classification Summary}

<<classification_summary>>=
#class_data <- dcast(m_pop_stats, PTID + VISITNO ~ Marker, mean, value.var = "Proportion")

# We randomly choose 50% of patients as training data and the remaining patients as test data
#set.seed(42)
#train_pct <- 1/2
#patients <- levels(class_data$PTID)
#num_patients <- length(patients)
#patients_train <- sample.int(num_patients, train_pct * num_patients)

#train_data <- subset(class_data, PTID %in% patients[patients_train])
#test_data <- subset(class_data, PTID %in% patients[-patients_train])

#train_x <- as.matrix(subset(train_data, select = -c(PTID, VISITNO)))
#train_y <- train_data$VISITNO

#test_x <- as.matrix(subset(test_data, select = -c(PTID, VISITNO)))
#test_y <- test_data$VISITNO

#glmnet_cv <- cv.glmnet(x = train_x, y = train_y, family = "binomial")

# TODO: Select the optimal CV values and predict from 
#glmnet_fit <- glmnet(x = train_x, y = train_y, family = "binomial")

# Plots the cross-validation fit from glmnet
#plot(glmnet_cv)

# Determines which features should be kept for classification
# If present, we manually remove the "(Intercept)"
#coef_glmnet <- coef(glmnet_cv)
#markers_kept <- rownames(coef_glmnet)[as.vector(coef_glmnet) != 0]
#markers_kept <- markers_kept[!grepl("(Intercept)", markers_kept)]

@ 


\end{document}
